> show libraryDependencies
> clean
> + Test/compile

$ exists target/scala-2.13/src_managed/test/sbt_doctest/MainDoctest.scala
$ exists target/scala-2.12/src_managed/test/sbt_doctest/MainDoctest.scala
$ absent target/scala-2.13/src_managed/test/sbt_doctest/NoDoctestDoctest.scala
$ absent target/scala-2.12/src_managed/test/sbt_doctest/NoDoctestDoctest.scala
$ exists target/scala-2.13/src_managed/test/sbt_doctest/VerbatimTestDoctest.scala
$ exists target/scala-2.12/src_managed/test/sbt_doctest/VerbatimTestDoctest.scala
$ exists target/scala-2.13/src_managed/test/READMEmd0Doctest.scala
$ exists target/scala-2.12/src_managed/test/READMEmd0Doctest.scala
$ absent target/scala-2.13/src_managed/test/sbt_doctest/IgnoreMeDoctest.scala
$ absent target/scala-2.12/src_managed/test/sbt_doctest/IgnoreMeDoctest.scala

# Try with utest
> reload
> clean
> set doctestTestFramework := DoctestTestFramework.MicroTest
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with scalatest
> reload
> clean
> set doctestTestFramework := DoctestTestFramework.ScalaTest
> doctestTestFramework
> + test
> existsInFile "with _root_.org.scalatestplus.scalacheck.Checkers" target/scala-2.13/src_managed/test/sbt_doctest/MainDoctest.scala
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with specs2
> reload
> clean
> set doctestTestFramework := DoctestTestFramework.Specs2
> doctestTestFramework
> + test
# Tests should only be executed once (regression test for #466)
> existsInFile "examples=1,successes=1,expectations=1" target/specs2-reports/stats/sbt_doctest.SingleDoctest.stats
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with scalacheck
> reload
> clean
> set doctestTestFramework := DoctestTestFramework.ScalaCheck
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with minitest
> reload
> clean
> set doctestTestFramework := DoctestTestFramework.Minitest
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with munit
> reload
> clean
> set doctestTestFramework := DoctestTestFramework.Munit
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test
